<#
The script collects the following information from a Clustered ONTAP cluster:
1. Quota Policy
2. Quota Rule

It requires that credentials be set for the relevant cluster (it will ignore the credentials provided in the data source)
#>

$quotaPolicyFile = "./Quota_Policy.csv"
$quotaRuleFile = "./Quota_Rule.csv"
$log = "D:\jai\quota_pack_jai\log.txt"

New-Item -Path $quotaPolicyFile -type file -force
New-Item -Path $quotaRuleFile -type file -force
New-Item -Path $log -type file -force

Start-Transcript $log
$ErrorActionPreference = 'SilentlyContinue'

# Ensure that dates are always returned in English
[System.Threading.Thread]::CurrentThread.CurrentCulture="en-US"

# Start stopwatch
$elapsedTime = [System.Diagnostics.Stopwatch]::StartNew()

# Get cluster information from data source
$connectionInfo = @{};
Try {
    $connectionInfo["host"] = Get-WfaRestParameter "host"
    $connectionInfo["port"] = Get-WfaRestParameter "port"
    $connectionInfo["credentials"] = Get-WfaCredentials -hostname $connectionInfo["host"]
} catch [System.Exception] {
    $error = "Error getting data source credentials: $($_.Exception)"
    Get-WFALogger -message $error -Error
    Throw "Error getting data source credentials. Error - $($_.Exception)"
}

# Connect to NetApp cDOT cluster
try {
    Connect-WfaCluster $connectionInfo["host"]
} catch [Exception] {
    $error = "Error connecting to cluster: $($_.Exception)"
    Get-WFALogger -message $error -Error
    throw "Error connecting to cluster. Error - $($_.Exception)"
} 

# Get Cluster name
try {
    $cluster_name = (Get-NcCluster).ClusterName
} catch [Exception] {
    $error = "Error getting NetApp cDOT cluster name: $($_.Exception)"
    Get-WFALogger -message $error -Error
    throw "Error getting NetApp cDOT cluster name. Error - $($_.Exception)"
}

$HostInfo = $connectionInfo["host"]


# ============================================
# Get Quota Rules and write to flat file
# ============================================
try {

    #$quotaRules = Get-NcVol | Get-NcQuotaStatus | ?{$_.status -eq "on"} | Get-NcQuota
    $quotaRules = Get-NcVol -Vserver "*clp*", "*mcp*" | ?{($_.vserver -notlike "*-dr") -and ($_.vserver -notlike "*-mc*")}|Get-NcQuota -Type "tree"
    
    foreach ($quota in $quotaRules) {
      
        $UserName = ""
        $UserMapping = 'N'
        [int64]$DiskLimit = 0
        [int64]$FileLimit = 0
        [int64]$SoftFileLimit = 0
        [int64]$SoftDiskLimit = 0
        [int64]$Threshold = 0
        $Volume = $volume.name
        $Type = $quota.QuotaType
        $Qtree = $quota.Qtree
        $Policy = $quota.Policy
        $Vserver =$quota.Vserver
        $Target = $quota.QuotaTarget

        if ( $quota.DiskLimit -ne "-" -And $quota.DiskLimit -ne "") {
            $DiskLimit = $quota.DiskLimit
        }
        if ( $quota.FileLimit -ne "-" -And  $quota.FileLimit -ne ""){
            $FileLimit = $quota.FileLimit
        }
        if ($quota.SoftFileLimit -ne "-"  -And $quota.SoftFileLimit -ne ""){
            $SoftFileLimit = $quota.SoftFileLimit
        }
        if ($quota.SoftDiskLimit -ne "-" -And $quota.SoftDiskLimit -ne ""){
            $SoftDiskLimit = $quota.SoftDiskLimit
        }
        if ($quota.Threshold -ne "-" -And $quota.Threshold -ne "") {
            $Threshold = $quota.Threshold
        }
        
        if ($Type -eq 'user' -and $Target.length -gt 0){
            $Target = $Target.replace("\","\\")
            if ($quota.PerformUserMappingSpecified  -eq 'false'){
                $UserMapping = 'N'
            }
            else{ $UserMapping = 'Y'}
            $UserName= $Target;     
        }   
        if ($Qtree -eq ''){ $Qtree = '""'}
        write-output ("\N`t$HostInfo`t$Vserver`t$Volume`t$Target`t$Qtree`t$Policy`t$Type`t$DiskLimit`t$FileLimit`t$SoftFileLimit`t$SoftDiskLimit`t$Threshold`t$UserName`t$UserMapping`n")
        Add-Content $quotaRuleFile ([byte[]][char[]] "\N`t$HostInfo`t$Vserver`t$Volume`t$Target`t$Qtree`t$Policy`t$Type`t$DiskLimit`t$FileLimit`t$SoftFileLimit`t$SoftDiskLimit`t$Threshold`t$UserName`t$UserMapping`n") -Encoding Byte
    }
}#while 
    catch [Exception] {
        $error = "Error getting quota rules: $($_.Exception)"
        Get-WFALogger -message $error -Error
        throw "Error getting quota policy information. Error - $($_.Exception)"
    }
    

# ============================================
# Get Quota Policies and write to flat file
# ============================================

try {

    $policy_info = Get-NcQuotaPolicy
    if($policy_info.length -gt 0) {
    
    foreach ($policy in $policy_info){
            $PolicyName = $policy.PolicyName
            $PolicyVserver = $policy.Vserver 
        write-output ("\N`t$HostInfo`t$PolicyVserver`t$PolicyName`n")
        Add-Content $qp ([byte[]][char[]] "\N`t$HostInfo`t$PolicyVserver`t$PolicyName`n") -Encoding Byte
        Add-Content $quotaPolicyFile ([byte[]][char[]] "\N`t$HostInfo`t$PolicyVserver`t$PolicyName`n") -Encoding Byte
        # This is required to ensure that the output file is UNIX encoded, without which MySQL's LOAD DATA
        # command does not work
        }
    }
   else{
    Get-WFALogger -message "Non of the quota policy is assigned." -Info
   }
}
catch [Exception] {
    $error = "Error getting quota policy information: $($_.Exception)"
    Get-WFALogger -message $error -Error
    throw "Error getting quota policy information. Error - $($_.Exception)"
}

Get-WFALogger -message "Cluster data acquisition completed in $($elapsedTime.Elapsed.ToString())" -Info
Stop-Transcript
