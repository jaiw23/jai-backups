

# /roles/na/ontap_volume/tasks/execute.yaml
 
---
 
-  name: "BLOCKnRESCUE: ONTAP_VOLUME"
   block:
      -  set_fact:
            service_start_time: "{{ lookup('pipe', 'date +%Y-%m-%d@%H:%M:%S') }}"
            
      -  name: "execute ONTAP_VOLUME"
         netapp.ontap.na_ontap_volume:
            hostname:                  "{{ clusters[loop_arg['hostname']]['mgmt_ip'] }}"
            username:                  "{{ clusters[loop_arg['hostname']]['username'] }}"
            password:                  "{{ clusters[loop_arg['hostname']]['password'] }}"
           
            cert_filepath:             "{{ loop_arg['cert_filepath']                | default(omit) }}"
            feature_flags:             "{{ loop_arg['feature_flags']                | default(omit) }}"
            http_port:                 "{{ loop_arg['http_port']                    | default(omit) }}"
            https:                     "{{ loop_arg['https']                        | default('true') }}"
            key_filepath:              "{{ loop_arg['key_filepath']                 | default(omit) }}"
            ontapi:                    "{{ loop_arg['ontapi']                       | default(omit) }}"
            use_rest:                  "{{ loop_arg['use_rest']                     | default('never') }}"
            validate_certs:            "{{ loop_arg['validate_certs']               | default('false') }}"
 
            name:                      "{{ loop_arg['name'] }}"
            vserver:                   "{{ loop_arg['vserver'] }}"
            state:                     "{{ loop_arg['state']                        | default('present') }}"
            is_online:                 "{{ loop_arg['is_online']                    | default('yes') }}"
            aggr_list:                 "{{ loop_arg['aggr_list']                    | default(omit) }}"
            aggr_list_multiplier:      "{{ loop_arg['aggr_list_multiplier']         | default(omit) }}"
            aggregate_name:            "{{ loop_arg['aggregate_name']               | default(omit) }}"
            analytics:                 "{{ loop_arg['analytics']                    | default(omit) }}"
            atime_update:              "{{ loop_arg['atime_update']                 | default(omit) }}"
            auto_provision_as:         "{{ loop_arg['auto_provision_as']            | default(omit) }}"
            auto_remap_luns:           "{{ loop_arg['auto_remap_luns']              | default(omit) }}"
            check_interval:            "{{ loop_arg['check_interval']               | default(omit) }}"
            comment:                   "{{ loop_arg['comment']                      | default(omit) }}"
            compression:               "{{ loop_arg['compression']                  | default(omit) }}"
            cutover_action:            "{{ loop_arg['cutover_action']               | default(omit) }}"
            efficiency_policy:         "{{ loop_arg['efficiency_policy']            | default(omit) }}"
            encrypt:                   "{{ loop_arg['encrypt']                      | default(omit) }}"
            export_policy:             "{{ loop_arg['export_policy']                | default(omit) }}"
            feature_flags:             "{{ loop_arg['feature_flags']                | default(omit) }}"
            force_ontap_version:       "{{ loop_arg['force_ontap_version']          | default(omit) }}"
            force_restore:             "{{ loop_arg['force_restore']                | default(omit) }}" 
            force_unmap_luns:          "{{ loop_arg['force_unmap_luns']             | default(omit) }}"
            from_name:                 "{{ loop_arg['from_name']                    | default(omit) }}"
            from_vserver:              "{{ loop_arg['from_vserver']                 | default(omit) }}"
            group_id:                  "{{ loop_arg['group_id']                     | default(omit) }}"
            inline_compression:        "{{ loop_arg['inline_compression']           | default(omit) }}"
            is_infinite:               "{{ loop_arg['is_infinite']                  | default(omit) }}"
            is_online:                 "{{ loop_arg['is_online']                    | default(omit) }}"
            junction_path:             "{{ loop_arg['junction_path']                | default(omit) }}"
            language:                  "{{ loop_arg['language']                     | default(omit) }}"
            logical_space_enforcement: "{{ loop_arg['logical_space_enforcement']    | default(omit) }}"
            logical_space_reporting:   "{{ loop_arg['logical_space_reporting']      | default(omit) }}"
            max_files:                 "{{ loop_arg['max_files']                    | default(omit) }}"
            max_wait_time:             "{{ loop_arg['max_wait_time']                | default(omit) }}"
            nvfail_enabled:            "{{ loop_arg['nvfail_enabled']               | default(omit) }}"
            percent_snapshot_space:    "{{ loop_arg['percent_snapshot_space']       | default(omit) }}"
            preserve_lun_ids:          "{{ loop_arg['preserve_lun_ids']             | default(omit) }}"
            policy:                    "{{ loop_arg['policy']                       | default(omit) }}"
            qos_adaptive_policy_group: "{{ loop_arg['qos_adaptive_policy_group']    | default(omit) }}"
            qos_policy_group:          "{{ loop_arg['qos_policy_group']             | default(omit) }}"
            size:                      "{{ loop_arg['size']                         | default(omit) }}"
            size_unit:                 "{{ loop_arg['size_unit']                    | default(omit) }}"
            sizing_method:             "{{ loop_arg['sizing_method']                | default(omit) }}"
            snapdir_access:            "{{ loop_arg['snapdir_access']               | default(omit) }}"
            snapshot_auto_delete:      "{{ loop_arg['snapshot_auto_delete']         | default(omit) }}"
            snapshot_policy:           "{{ loop_arg['snapshot_policy']              | default(omit) }}"
            snapshot_restore:          "{{ loop_arg['snapshot_restore']             | default(omit) }}"
            space_guarantee:           "{{ loop_arg['space_guarantee']              | default(omit) }}"
            space_slo:                 "{{ loop_arg['space_slo']                    | default(omit) }}"
            tags:                      "{{ loop_arg['tags']                         | default(omit) }}"
            tiering_policy:            "{{ loop_arg['tiering_policy']               | default(omit) }}"
            time_out:                  "{{ loop_arg['time_out']                     | default(omit) }}"
            type:                      "{{ loop_arg['type']                         | default(omit) }}"
            user_id:                   "{{ loop_arg['user_id']                      | default(omit) }}"
            unix_permissions:          "{{ loop_arg['unix_permissions']             | default(omit) }}"
            volume_security_style:     "{{ loop_arg['volume_security_style']        | default(omit) }}"
            vserver_dr_protection:     "{{ loop_arg['vserver_dr_protection']        | default(omit) }}"
            wait_for_completion:       "{{ loop_arg['wait_for_completion']          | default(omit) }}"
           
 
         loop:    "{{ args }}"
         loop_control:
            loop_var:   loop_arg
         register:      role_result
 
   rescue:
      -  name: Set Play Status
         set_fact:
            playbook_status:   "failed"
 
   always:
      -  name: add log msg
         vars:
            role_log:
               role: "ONTAP_VOLUME"
               timestamp:
                  start_time: "{{service_start_time}}"
                  end_time: "{{ lookup('pipe', 'date +%Y-%m-%d@%H:%M:%S') }}"
               service_status: "{{ playbook_status }}"
               result: "{{role_result}}"  
         set_fact:
            global_log_msgs:   "{{ global_log_msgs + [ role_log ] }}"
        
      
 
# /tasks/main.yml
 
---
 
- name: 'show args'
  include_tasks: test.yml
  when: mode == 'test' and status == "success"
 
- name: 'execute the request'
  include_tasks: execute.yml
  when: mode != 'test' and status == "success"
 
 
# /tasks/test.yml
 
---
 
-  name: 'show args'
   debug:
      msg:  "{{ loop_arg }}"
   loop:    "{{ args }}"
   loop_control:
      loop_var:   loop_arg
 
